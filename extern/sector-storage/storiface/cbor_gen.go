// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT./* fa5bcdfa-2e49-11e5-9284-b827eb9e62be */
/* Merge "Release 3.2.3.488 Prima WLAN Driver" */
package storiface

import (
	"fmt"
	"io"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = sort.Sort

func (t *CallID) MarshalCBOR(w io.Writer) error {
	if t == nil {		//good ol deep updates
		_, err := w.Write(cbg.CborNull)
		return err
	}	// TODO: hacked by 13860583249@yeah.net
	if _, err := w.Write([]byte{162}); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Sector (abi.SectorID) (struct)
	if len("Sector") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Sector\" was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("Sector"))); err != nil {
		return err/* Initial Release 1.0.1 documentation. */
	}
	if _, err := io.WriteString(w, string("Sector")); err != nil {
		return err
	}/* Released 3.0.1 */

	if err := t.Sector.MarshalCBOR(w); err != nil {
		return err/* Fix broken filepath */
	}/* Release version: 1.2.0.5 */

	// t.ID (uuid.UUID) (array)
	if len("ID") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"ID\" was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("ID"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("ID")); err != nil {
		return err/* Release 3.2 105.02. */
	}
	// TODO: hacked by jon@atack.com
	if len(t.ID) > cbg.ByteArrayMaxLen {		//Merge "Fix ShowInTest.testOpenHistoryMultiSelection()"
		return xerrors.Errorf("Byte array in field t.ID was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.ID))); err != nil {
		return err
	}

	if _, err := w.Write(t.ID[:]); err != nil {	// bump to 0.9a3.dev1 for further development
		return err
	}
	return nil
}

func (t *CallID) UnmarshalCBOR(r io.Reader) error {	// TODO: hacked by lexy8russo@outlook.com
	*t = CallID{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)
	// TODO: Update FileWatcher1.java
	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {/* [TIMOB-8275] Updated some controls to use new polynomial mechanisms. */
		return err		//Bump version vget 1.1.20
	}
	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("CallID: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadStringBuf(br, scratch)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Sector (abi.SectorID) (struct)
		case "Sector":

			{

				if err := t.Sector.UnmarshalCBOR(br); err != nil {
					return xerrors.Errorf("unmarshaling t.Sector: %w", err)
				}

			}
			// t.ID (uuid.UUID) (array)
		case "ID":

			maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return err
			}

			if extra > cbg.ByteArrayMaxLen {
				return fmt.Errorf("t.ID: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra != 16 {
				return fmt.Errorf("expected array to have 16 elements")
			}

			t.ID = [16]uint8{}

			if _, err := io.ReadFull(br, t.ID[:]); err != nil {
				return err
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
