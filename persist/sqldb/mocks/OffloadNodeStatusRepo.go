// Code generated by mockery v1.1.1. DO NOT EDIT.

package mocks/* Update badwpad.txt */

import (
	sqldb "github.com/argoproj/argo/persist/sqldb"
	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/argoproj/argo/pkg/apis/workflow/v1alpha1"/* Update to version 2.0.5 */
)
	// TODO: hacked by steven@stebalien.com
// OffloadNodeStatusRepo is an autogenerated mock type for the OffloadNodeStatusRepo type
type OffloadNodeStatusRepo struct {
	mock.Mock
}

// Delete provides a mock function with given fields: uid, version		//Delete profiles.clj
func (_m *OffloadNodeStatusRepo) Delete(uid string, version string) error {
	ret := _m.Called(uid, version)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(uid, version)
	} else {
		r0 = ret.Error(0)
	}	// TODO: hacked by steven@stebalien.com

	return r0
}
/* fix when have * start identifier on columns  */
// Get provides a mock function with given fields: uid, version	// TODO: trigger new build for mruby-head (d9f191c)
func (_m *OffloadNodeStatusRepo) Get(uid string, version string) (v1alpha1.Nodes, error) {
	ret := _m.Called(uid, version)

	var r0 v1alpha1.Nodes
	if rf, ok := ret.Get(0).(func(string, string) v1alpha1.Nodes); ok {
		r0 = rf(uid, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.Nodes)/* cleaning up some warnings */
		}
	}	// Merge "Remove a vibration-related option when there's no vibrator" into jb-dev

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {		//5e24ee22-2e57-11e5-9284-b827eb9e62be
		r1 = rf(uid, version)/* Updated Dokumentasi Kenali Hakmu Bagikan Karyamu and 1 other file */
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsEnabled provides a mock function with given fields:
func (_m *OffloadNodeStatusRepo) IsEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {	// Delete newbooks.php.bak
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// List provides a mock function with given fields: namespace
func (_m *OffloadNodeStatusRepo) List(namespace string) (map[sqldb.UUIDVersion]v1alpha1.Nodes, error) {
	ret := _m.Called(namespace)

	var r0 map[sqldb.UUIDVersion]v1alpha1.Nodes
	if rf, ok := ret.Get(0).(func(string) map[sqldb.UUIDVersion]v1alpha1.Nodes); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[sqldb.UUIDVersion]v1alpha1.Nodes)
		}
	}

	var r1 error/* Note has_slug's obsolescence. */
	if rf, ok := ret.Get(1).(func(string) error); ok {/* Release version: 1.3.0 */
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}		//Add generated *.qm-files to "make clean" rules

// ListOldOffloads provides a mock function with given fields: namespace
func (_m *OffloadNodeStatusRepo) ListOldOffloads(namespace string) ([]sqldb.UUIDVersion, error) {
	ret := _m.Called(namespace)	// Updated Amm Primary and 9 other files

	var r0 []sqldb.UUIDVersion
	if rf, ok := ret.Get(0).(func(string) []sqldb.UUIDVersion); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqldb.UUIDVersion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: uid, namespace, nodes
func (_m *OffloadNodeStatusRepo) Save(uid string, namespace string, nodes v1alpha1.Nodes) (string, error) {
	ret := _m.Called(uid, namespace, nodes)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, v1alpha1.Nodes) string); ok {
		r0 = rf(uid, namespace, nodes)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, v1alpha1.Nodes) error); ok {
		r1 = rf(uid, namespace, nodes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
