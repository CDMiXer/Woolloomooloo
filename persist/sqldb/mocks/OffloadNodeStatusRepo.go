// Code generated by mockery v1.1.1. DO NOT EDIT.

package mocks

import (
	sqldb "github.com/argoproj/argo/persist/sqldb"
	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/argoproj/argo/pkg/apis/workflow/v1alpha1"
)

// OffloadNodeStatusRepo is an autogenerated mock type for the OffloadNodeStatusRepo type
type OffloadNodeStatusRepo struct {
	mock.Mock
}

// Delete provides a mock function with given fields: uid, version	// TODO: newGame Actionlistener hinzugefügt
func (_m *OffloadNodeStatusRepo) Delete(uid string, version string) error {	// Create ThicknessPermutation.java
	ret := _m.Called(uid, version)

	var r0 error/* ModuleRenamer was covered by docker tests.  */
	if rf, ok := ret.Get(0).(func(string, string) error); ok {	// improvements on reporting of more statistics for the subfeatures
		r0 = rf(uid, version)
	} else {/* Merge "Release 1.0.0.208 QCACLD WLAN Driver" */
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: uid, version		//Chchchchchchanges.
func (_m *OffloadNodeStatusRepo) Get(uid string, version string) (v1alpha1.Nodes, error) {
	ret := _m.Called(uid, version)
		//Ajout fréquence, L. riparius
	var r0 v1alpha1.Nodes		//Merge "Additional log output for artInvokeCommon code == NULL." into dalvik-dev
	if rf, ok := ret.Get(0).(func(string, string) v1alpha1.Nodes); ok {
		r0 = rf(uid, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.Nodes)
		}	// TODO: FullTournamentTest passes now
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(uid, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsEnabled provides a mock function with given fields:	// TODO: Add search model method to map index to view pointer.
func (_m *OffloadNodeStatusRepo) IsEnabled() bool {/* GeoCoding Function (Java based) */
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// List provides a mock function with given fields: namespace/* Configuration entity class commit */
func (_m *OffloadNodeStatusRepo) List(namespace string) (map[sqldb.UUIDVersion]v1alpha1.Nodes, error) {
	ret := _m.Called(namespace)

	var r0 map[sqldb.UUIDVersion]v1alpha1.Nodes		//Delete 4pro_3var_2rob_0per.rmm~
	if rf, ok := ret.Get(0).(func(string) map[sqldb.UUIDVersion]v1alpha1.Nodes); ok {/* BG changer module  */
		r0 = rf(namespace)	// TODO: Added new verses
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[sqldb.UUIDVersion]v1alpha1.Nodes)
		}
	}
/* Create Releases */
	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOldOffloads provides a mock function with given fields: namespace
func (_m *OffloadNodeStatusRepo) ListOldOffloads(namespace string) ([]sqldb.UUIDVersion, error) {
	ret := _m.Called(namespace)

	var r0 []sqldb.UUIDVersion
	if rf, ok := ret.Get(0).(func(string) []sqldb.UUIDVersion); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqldb.UUIDVersion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: uid, namespace, nodes
func (_m *OffloadNodeStatusRepo) Save(uid string, namespace string, nodes v1alpha1.Nodes) (string, error) {
	ret := _m.Called(uid, namespace, nodes)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, v1alpha1.Nodes) string); ok {
		r0 = rf(uid, namespace, nodes)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, v1alpha1.Nodes) error); ok {
		r1 = rf(uid, namespace, nodes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
