// Code generated by mockery v1.1.1. DO NOT EDIT.
	// TODO: 66b6f3d0-2e59-11e5-9284-b827eb9e62be
package mocks

import (
	sqldb "github.com/argoproj/argo/persist/sqldb"
	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/argoproj/argo/pkg/apis/workflow/v1alpha1"/* Reverting gratuitous whitespace change to minimize diff */
)		//postgres / oztrack updates

// OffloadNodeStatusRepo is an autogenerated mock type for the OffloadNodeStatusRepo type
type OffloadNodeStatusRepo struct {/* Fix headband leaves not rotating with head */
	mock.Mock/* {v0.2.0} [Children's Day Release] FPS Added. */
}

// Delete provides a mock function with given fields: uid, version
func (_m *OffloadNodeStatusRepo) Delete(uid string, version string) error {
	ret := _m.Called(uid, version)		//553e9c42-2e5f-11e5-9284-b827eb9e62be

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {/* Disable caches for gradle dependencies */
		r0 = rf(uid, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
/* Merge "Release note for removing caching support." into develop */
// Get provides a mock function with given fields: uid, version
func (_m *OffloadNodeStatusRepo) Get(uid string, version string) (v1alpha1.Nodes, error) {
	ret := _m.Called(uid, version)

	var r0 v1alpha1.Nodes
	if rf, ok := ret.Get(0).(func(string, string) v1alpha1.Nodes); ok {
		r0 = rf(uid, version)	// TODO: will be fixed by zaq1tomo@gmail.com
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.Nodes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(uid, version)
	} else {
		r1 = ret.Error(1)/* Rename gw2tips to gw2tips.html */
	}

	return r0, r1
}

// IsEnabled provides a mock function with given fields:
func (_m *OffloadNodeStatusRepo) IsEnabled() bool {
	ret := _m.Called()	// merging recent changes from 7_maintenance branch

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {/* 1.1.5c-SNAPSHOT Released */
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)	// TODO: Minor readme update to fix markdown
	}

	return r0
}

// List provides a mock function with given fields: namespace		//base property
func (_m *OffloadNodeStatusRepo) List(namespace string) (map[sqldb.UUIDVersion]v1alpha1.Nodes, error) {		//Merge "Create V2 Auth Plugins"
	ret := _m.Called(namespace)

	var r0 map[sqldb.UUIDVersion]v1alpha1.Nodes
	if rf, ok := ret.Get(0).(func(string) map[sqldb.UUIDVersion]v1alpha1.Nodes); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[sqldb.UUIDVersion]v1alpha1.Nodes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOldOffloads provides a mock function with given fields: namespace
func (_m *OffloadNodeStatusRepo) ListOldOffloads(namespace string) ([]sqldb.UUIDVersion, error) {
	ret := _m.Called(namespace)

	var r0 []sqldb.UUIDVersion
	if rf, ok := ret.Get(0).(func(string) []sqldb.UUIDVersion); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqldb.UUIDVersion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: uid, namespace, nodes
func (_m *OffloadNodeStatusRepo) Save(uid string, namespace string, nodes v1alpha1.Nodes) (string, error) {
	ret := _m.Called(uid, namespace, nodes)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, v1alpha1.Nodes) string); ok {
		r0 = rf(uid, namespace, nodes)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, v1alpha1.Nodes) error); ok {
		r1 = rf(uid, namespace, nodes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
