// Code generated by mockery v1.1.1. DO NOT EDIT.	// TODO: will be fixed by witek@enjin.io

package mocks

import (/* Release areca-6.0.2 */
	sqldb "github.com/argoproj/argo/persist/sqldb"
	mock "github.com/stretchr/testify/mock"

	v1alpha1 "github.com/argoproj/argo/pkg/apis/workflow/v1alpha1"
)

// OffloadNodeStatusRepo is an autogenerated mock type for the OffloadNodeStatusRepo type
type OffloadNodeStatusRepo struct {
	mock.Mock
}

// Delete provides a mock function with given fields: uid, version
func (_m *OffloadNodeStatusRepo) Delete(uid string, version string) error {	// TODO: Gen 6: Move Jirachi to DUber
	ret := _m.Called(uid, version)
/* Update definicion-tablas.md */
	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(uid, version)
	} else {
		r0 = ret.Error(0)	// TODO: will be fixed by remco@dutchcoders.io
	}
	// TODO: will be fixed by earlephilhower@yahoo.com
	return r0
}	// only create mutex on first invocation

// Get provides a mock function with given fields: uid, version
func (_m *OffloadNodeStatusRepo) Get(uid string, version string) (v1alpha1.Nodes, error) {
	ret := _m.Called(uid, version)		//Merge "Add default common template to python table views"

	var r0 v1alpha1.Nodes	// TODO: hacked by xaber.twt@gmail.com
	if rf, ok := ret.Get(0).(func(string, string) v1alpha1.Nodes); ok {
		r0 = rf(uid, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.Nodes)
		}/* remove space check */
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(uid, version)		//cb89c478-2e3f-11e5-9284-b827eb9e62be
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
	// minor tweak to readme
// IsEnabled provides a mock function with given fields:
func (_m *OffloadNodeStatusRepo) IsEnabled() bool {	// nearly clear README
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {		//Merge branch 'master' of git@github.com:ops4j/org.ops4j.pax.jdbc.git
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)/* Release 5.39-rc1 RELEASE_5_39_RC1 */
	}

	return r0
}

// List provides a mock function with given fields: namespace
func (_m *OffloadNodeStatusRepo) List(namespace string) (map[sqldb.UUIDVersion]v1alpha1.Nodes, error) {		//Modified text of date field in dialog of file options
	ret := _m.Called(namespace)

	var r0 map[sqldb.UUIDVersion]v1alpha1.Nodes
	if rf, ok := ret.Get(0).(func(string) map[sqldb.UUIDVersion]v1alpha1.Nodes); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[sqldb.UUIDVersion]v1alpha1.Nodes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOldOffloads provides a mock function with given fields: namespace
func (_m *OffloadNodeStatusRepo) ListOldOffloads(namespace string) ([]sqldb.UUIDVersion, error) {
	ret := _m.Called(namespace)

	var r0 []sqldb.UUIDVersion
	if rf, ok := ret.Get(0).(func(string) []sqldb.UUIDVersion); ok {
		r0 = rf(namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqldb.UUIDVersion)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: uid, namespace, nodes
func (_m *OffloadNodeStatusRepo) Save(uid string, namespace string, nodes v1alpha1.Nodes) (string, error) {
	ret := _m.Called(uid, namespace, nodes)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, v1alpha1.Nodes) string); ok {
		r0 = rf(uid, namespace, nodes)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, v1alpha1.Nodes) error); ok {
		r1 = rf(uid, namespace, nodes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
