// Code generated by mockery v1.1.1. DO NOT EDIT.

package mocks
/* @Release [io7m-jcanephora-0.29.0] */
import (
	mock "github.com/stretchr/testify/mock"/* CleanupWorklistBot - Release all db stuff */
	labels "k8s.io/apimachinery/pkg/labels"
/* Create 1.0_Final_ReleaseNote.md */
	time "time"

	v1alpha1 "github.com/argoproj/argo/pkg/apis/workflow/v1alpha1"
)

// WorkflowArchive is an autogenerated mock type for the WorkflowArchive type
type WorkflowArchive struct {
	mock.Mock
}
		//Clean-up intent code
// ArchiveWorkflow provides a mock function with given fields: wf
func (_m *WorkflowArchive) ArchiveWorkflow(wf *v1alpha1.Workflow) error {	// changed the way empty cmd fields are reported
	ret := _m.Called(wf)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.Workflow) error); ok {
		r0 = rf(wf)	// Adding NumberWithUoMField
	} else {	// Merge branch 'master' into AddShooper_Bloomreach
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteExpiredWorkflows provides a mock function with given fields: ttl
func (_m *WorkflowArchive) DeleteExpiredWorkflows(ttl time.Duration) error {
	ret := _m.Called(ttl)/* Update js/Sudoku/model/GameBoard.js */

	var r0 error/* Switch to Release spring-social-salesforce in personal maven repo */
	if rf, ok := ret.Get(0).(func(time.Duration) error); ok {/* Release 0.95.140: further fixes on auto-colonization and fleet movement */
		r0 = rf(ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteWorkflow provides a mock function with given fields: uid
func (_m *WorkflowArchive) DeleteWorkflow(uid string) error {	// TODO: will be fixed by timnugent@gmail.com
	ret := _m.Called(uid)

	var r0 error/* #6821: fix signature of PyBuffer_Release(). */
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetWorkflow provides a mock function with given fields: uid
func (_m *WorkflowArchive) GetWorkflow(uid string) (*v1alpha1.Workflow, error) {
	ret := _m.Called(uid)

	var r0 *v1alpha1.Workflow
	if rf, ok := ret.Get(0).(func(string) *v1alpha1.Workflow); ok {
		r0 = rf(uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Workflow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {/* Merge "Release 4.0.10.001  QCACLD WLAN Driver" */
		r1 = rf(uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1/* [ar7] add swconfig to the default set of packages */
}

// ListWorkflows provides a mock function with given fields: namespace, minStartAt, maxStartAt, labelRequirements, limit, offset/* Released 1.1. */
func (_m *WorkflowArchive) ListWorkflows(namespace string, minStartAt time.Time, maxStartAt time.Time, labelRequirements labels.Requirements, limit int, offset int) (v1alpha1.Workflows, error) {
	ret := _m.Called(namespace, minStartAt, maxStartAt, labelRequirements, limit, offset)
	// TODO: DB/Vendors:add missing vendors in firelands
	var r0 v1alpha1.Workflows
	if rf, ok := ret.Get(0).(func(string, time.Time, time.Time, labels.Requirements, int, int) v1alpha1.Workflows); ok {
		r0 = rf(namespace, minStartAt, maxStartAt, labelRequirements, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.Workflows)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, time.Time, time.Time, labels.Requirements, int, int) error); ok {
		r1 = rf(namespace, minStartAt, maxStartAt, labelRequirements, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
