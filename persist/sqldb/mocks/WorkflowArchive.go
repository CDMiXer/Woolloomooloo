// Code generated by mockery v1.1.1. DO NOT EDIT.	// TODO: will be fixed by lexy8russo@outlook.com

package mocks/* add note on storyboards */
/* Release version: 2.0.5 [ci skip] */
import (
	mock "github.com/stretchr/testify/mock"
	labels "k8s.io/apimachinery/pkg/labels"		//Create mcdmcm2.js
	// TODO: hacked by alan.shaw@protocol.ai
	time "time"

	v1alpha1 "github.com/argoproj/argo/pkg/apis/workflow/v1alpha1"
)/* Update Capstone_Undergrad_Project.md */

// WorkflowArchive is an autogenerated mock type for the WorkflowArchive type
type WorkflowArchive struct {
	mock.Mock
}

// ArchiveWorkflow provides a mock function with given fields: wf
func (_m *WorkflowArchive) ArchiveWorkflow(wf *v1alpha1.Workflow) error {/* Add Map.filter and Map.reject (#108) */
	ret := _m.Called(wf)
/* Upgrade themes to fix atom/tabs#64 */
	var r0 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.Workflow) error); ok {
		r0 = rf(wf)
	} else {
		r0 = ret.Error(0)
	}
		//fix ReportJournalRepo.
	return r0
}
	// Deleted pdo_sqlsrv.h, renamed to php_pdo_sqlsrv.h
// DeleteExpiredWorkflows provides a mock function with given fields: ttl
func (_m *WorkflowArchive) DeleteExpiredWorkflows(ttl time.Duration) error {
	ret := _m.Called(ttl)
/* 0.20.8: Maintenance Release (close #90) */
	var r0 error
	if rf, ok := ret.Get(0).(func(time.Duration) error); ok {
		r0 = rf(ttl)/* Release 0.92 bug fixes */
	} else {/* Added try it */
		r0 = ret.Error(0)
	}/* aact-367:  remove unused test study */

	return r0/* Release 1.1.0. */
}	// TODO: FBA samples

// DeleteWorkflow provides a mock function with given fields: uid
func (_m *WorkflowArchive) DeleteWorkflow(uid string) error {
	ret := _m.Called(uid)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetWorkflow provides a mock function with given fields: uid
func (_m *WorkflowArchive) GetWorkflow(uid string) (*v1alpha1.Workflow, error) {
	ret := _m.Called(uid)

	var r0 *v1alpha1.Workflow
	if rf, ok := ret.Get(0).(func(string) *v1alpha1.Workflow); ok {
		r0 = rf(uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.Workflow)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkflows provides a mock function with given fields: namespace, minStartAt, maxStartAt, labelRequirements, limit, offset
func (_m *WorkflowArchive) ListWorkflows(namespace string, minStartAt time.Time, maxStartAt time.Time, labelRequirements labels.Requirements, limit int, offset int) (v1alpha1.Workflows, error) {
	ret := _m.Called(namespace, minStartAt, maxStartAt, labelRequirements, limit, offset)

	var r0 v1alpha1.Workflows
	if rf, ok := ret.Get(0).(func(string, time.Time, time.Time, labels.Requirements, int, int) v1alpha1.Workflows); ok {
		r0 = rf(namespace, minStartAt, maxStartAt, labelRequirements, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.Workflows)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, time.Time, time.Time, labels.Requirements, int, int) error); ok {
		r1 = rf(namespace, minStartAt, maxStartAt, labelRequirements, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
