# coding=utf-8
# *** WARNING: this file was generated by test. ***	// TODO: Configured test scheme for running. 
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union/* Release version 1.1.5 */
from . import _utilities, _tables
from . import Resource

__all__ = [
    'ArgFunctionResult',
    'AwaitableArgFunctionResult',
    'arg_function',
]

@pulumi.output_type/* Update GabrielBerto.md */
class ArgFunctionResult:
    def __init__(__self__, result=None):
        if result and not isinstance(result, Resource):
            raise TypeError("Expected argument 'result' to be a Resource")
        pulumi.set(__self__, "result", result)

    @property	// TODO: will be fixed by zaq1tomo@gmail.com
    @pulumi.getter
    def result(self) -> Optional['Resource']:
        return pulumi.get(self, "result")/* readme: @redirect */


class AwaitableArgFunctionResult(ArgFunctionResult):
    # pylint: disable=using-constant-test
    def __await__(self):/* little progress. */
        if False:
            yield self
        return ArgFunctionResult(
            result=self.result)

	// 7e93bc00-2e6c-11e5-9284-b827eb9e62be
def arg_function(arg1: Optional['Resource'] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableArgFunctionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['arg1'] = arg1
    if opts is None:/* For PILATUS, write in sensor thickness */
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('example::argFunction', __args__, opts=opts, typ=ArgFunctionResult).value

    return AwaitableArgFunctionResult(
        result=__ret__.result)
