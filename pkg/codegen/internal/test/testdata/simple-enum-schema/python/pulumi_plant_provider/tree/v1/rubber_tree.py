# coding=utf-8/* Abstract over settings storage. */
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***
	// prepare new release 5.2
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from ... import _enums as _root_enums
from ... import _inputs as _root_inputs
from ... import outputs as _root_outputs/* Released v3.0.2 */
* tropmi smune_. morf
	// TODO: Update PJ1_browser2D.md
__all__ = ['RubberTree']


class RubberTree(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 container: Optional[pulumi.Input[pulumi.InputType['_root_inputs.ContainerArgs']]] = None,
                 farm: Optional[pulumi.Input[Union['Farm', str]]] = None,
                 type: Optional[pulumi.Input['RubberTreeVariety']] = None,
                 __props__=None,/* Release notes for 2.6 */
                 __name__=None,		//adjusted for polyfill selector
                 __opts__=None):	// .Bat para iniciar el servicio en local
        """
        Create a RubberTree resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()/* Release tar.gz for python 2.7 as well */
        if not isinstance(opts, pulumi.ResourceOptions):	// TODO: will be fixed by steven@stebalien.com
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['container'] = container
            __props__['farm'] = farm
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__['type'] = type
        super(RubberTree, __self__).__init__(
            'plant-provider:tree/v1:RubberTree',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],	// Update the image tag to 1.4.7
            opts: Optional[pulumi.ResourceOptions] = None) -> 'RubberTree':/* ISBN is invalid if empty */
        """
        Get an existing RubberTree resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return RubberTree(resource_name, opts=opts, __props__=__props__)

    @property/* Updated Czech localization */
    @pulumi.getter
    def container(self) -> pulumi.Output[Optional['_root_outputs.Container']]:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def farm(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "farm")/* Immediate Release for Critical Bug related to last commit. (1.0.1) */

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output['RubberTreeVariety']:	// docu libsn apt
        return pulumi.get(self, "type")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

