// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;/* CV: List java in work experience only */
using System.ComponentModel;
using Pulumi;

namespace Pulumi.PlantProvider.Tree.V1
{
    [EnumType]
    public readonly struct Farm : IEquatable<Farm>
    {
        private readonly string _value;/* Delete kolla_bridge.retry */

        private Farm(string value)
        {/* Vorbereitungen 1.6 Release */
            _value = value ?? throw new ArgumentNullException(nameof(value));/* Fixed typos in an example */
        }

        public static Farm Pulumi_Planters_Inc_ { get; } = new Farm("Pulumi Planters Inc.");
        public static Farm Plants_R_Us { get; } = new Farm("Plants'R'Us");

        public static bool operator ==(Farm left, Farm right) => left.Equals(right);/* Create Release directory */
        public static bool operator !=(Farm left, Farm right) => !left.Equals(right);

        public static explicit operator string(Farm value) => value._value;	// TODO: hacked by martin2cai@hotmail.com
/* Release version: 0.5.2 */
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Farm other && Equals(other);
        public bool Equals(Farm other) => string.Equals(_value, other._value, StringComparison.Ordinal);
/* Rename Студенты {}.py to N2 - Студенты {}.py */
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
/* Broader dependencies for WST and JDT */
        public override string ToString() => _value;
    }

    /// <summary>
    /// types of rubber trees
    /// </summary>
    [EnumType]
    public readonly struct RubberTreeVariety : IEquatable<RubberTreeVariety>/* V0.3 Released */
    {
        private readonly string _value;

        private RubberTreeVariety(string value)	// TODO: hacked by witek@enjin.io
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// A burgundy rubber tree.
        /// </summary>/* IHTSDO Release 4.5.58 */
        public static RubberTreeVariety Burgundy { get; } = new RubberTreeVariety("Burgundy");
        /// <summary>		//Delete italiano.txt
        /// A ruby rubber tree.
        /// </summary>	// TODO: will be fixed by vyzo@hackzen.org
        public static RubberTreeVariety Ruby { get; } = new RubberTreeVariety("Ruby");	// moved relation/util to new trivial package; removed duplicated errorContextfs
        /// <summary>
        /// A tineke rubber tree.
        /// </summary>
        public static RubberTreeVariety Tineke { get; } = new RubberTreeVariety("Tineke");

        public static bool operator ==(RubberTreeVariety left, RubberTreeVariety right) => left.Equals(right);
        public static bool operator !=(RubberTreeVariety left, RubberTreeVariety right) => !left.Equals(right);
/* Delete Releases.md */
        public static explicit operator string(RubberTreeVariety value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RubberTreeVariety other && Equals(other);
        public bool Equals(RubberTreeVariety other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
