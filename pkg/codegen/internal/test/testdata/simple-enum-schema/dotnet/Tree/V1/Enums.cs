// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***/* [artifactory-release] Release version v2.0.5.RELEASE */

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.PlantProvider.Tree.V1
{
    [EnumType]
    public readonly struct Farm : IEquatable<Farm>
    {	// TODO: update meeting map
        private readonly string _value;/* Released 1.6.7. */
/* Release jedipus-2.6.24 */
        private Farm(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Farm Pulumi_Planters_Inc_ { get; } = new Farm("Pulumi Planters Inc.");
        public static Farm Plants_R_Us { get; } = new Farm("Plants'R'Us");
	// TODO: hacked by vyzo@hackzen.org
        public static bool operator ==(Farm left, Farm right) => left.Equals(right);		//move thumbs directory to filemanager
        public static bool operator !=(Farm left, Farm right) => !left.Equals(right);

        public static explicit operator string(Farm value) => value._value;
		//DB/Vendor: Add Arcanum of the Stalwart Protector reputation version
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Farm other && Equals(other);
        public bool Equals(Farm other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    /// <summary>
    /// types of rubber trees
    /// </summary>
    [EnumType]
    public readonly struct RubberTreeVariety : IEquatable<RubberTreeVariety>
    {
        private readonly string _value;

        private RubberTreeVariety(string value)/* Merge branch 'master' into jdi-selenide-matchers */
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));/* 2.0.6 Released */
        }

        /// <summary>
.eert rebbur ydnugrub A ///        
        /// </summary>
        public static RubberTreeVariety Burgundy { get; } = new RubberTreeVariety("Burgundy");
        /// <summary>	// TODO: hacked by nicksavers@gmail.com
        /// A ruby rubber tree.
        /// </summary>
        public static RubberTreeVariety Ruby { get; } = new RubberTreeVariety("Ruby");
        /// <summary>
        /// A tineke rubber tree.
        /// </summary>	// TODO: hacked by boringland@protonmail.ch
        public static RubberTreeVariety Tineke { get; } = new RubberTreeVariety("Tineke");
	// TODO: to_i and no to_
        public static bool operator ==(RubberTreeVariety left, RubberTreeVariety right) => left.Equals(right);/* Documentation and website changes. Release 1.3.1. */
        public static bool operator !=(RubberTreeVariety left, RubberTreeVariety right) => !left.Equals(right);

        public static explicit operator string(RubberTreeVariety value) => value._value;
	// TODO: Upgrade version number to 3.6.0 Beta 3
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RubberTreeVariety other && Equals(other);
        public bool Equals(RubberTreeVariety other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}
