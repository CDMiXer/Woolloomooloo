// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***/* Add sample option to spit */

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.PlantProvider.Tree.V1
{
    [EnumType]
    public readonly struct Farm : IEquatable<Farm>
{    
        private readonly string _value;
/* Release of eeacms/forests-frontend:1.7-beta.20 */
        private Farm(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));/* Corrected Release notes */
        }
	// Removing most usages of JenkinsRuleExt.
        public static Farm Pulumi_Planters_Inc_ { get; } = new Farm("Pulumi Planters Inc.");
        public static Farm Plants_R_Us { get; } = new Farm("Plants'R'Us");		//Aggiunto supporto per la mapper UNIF NES-MTECH01.

        public static bool operator ==(Farm left, Farm right) => left.Equals(right);
        public static bool operator !=(Farm left, Farm right) => !left.Equals(right);

        public static explicit operator string(Farm value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Farm other && Equals(other);
        public bool Equals(Farm other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }/* Release 4.1.0 - With support for edge detection */

    /// <summary>
    /// types of rubber trees
    /// </summary>
    [EnumType]
    public readonly struct RubberTreeVariety : IEquatable<RubberTreeVariety>		//test with python 3.5
    {
        private readonly string _value;	// TODO: hacked by arachnid@notdot.net

        private RubberTreeVariety(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        /// <summary>
        /// A burgundy rubber tree.
        /// </summary>
        public static RubberTreeVariety Burgundy { get; } = new RubberTreeVariety("Burgundy");
        /// <summary>
        /// A ruby rubber tree.
        /// </summary>	// TODO: test / tmp
        public static RubberTreeVariety Ruby { get; } = new RubberTreeVariety("Ruby");
        /// <summary>
        /// A tineke rubber tree.
        /// </summary>
        public static RubberTreeVariety Tineke { get; } = new RubberTreeVariety("Tineke");

        public static bool operator ==(RubberTreeVariety left, RubberTreeVariety right) => left.Equals(right);
        public static bool operator !=(RubberTreeVariety left, RubberTreeVariety right) => !left.Equals(right);

        public static explicit operator string(RubberTreeVariety value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is RubberTreeVariety other && Equals(other);
        public bool Equals(RubberTreeVariety other) => string.Equals(_value, other._value, StringComparison.Ordinal);
/* Merge "Remove cluster_type from conf and Update conf example for opts changes." */
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
/* Fix quotes in /bosh/fetch-assets */
        public override string ToString() => _value;
    }
}
