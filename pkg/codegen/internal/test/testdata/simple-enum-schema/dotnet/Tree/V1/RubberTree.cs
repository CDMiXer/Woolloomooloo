// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
/* Changed Month of Release */
using System;
using System.Collections.Generic;
using System.Collections.Immutable;	// TODO: Update PortFusion.cabal
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.PlantProvider.Tree.V1
{
    [PlantProviderResourceType("plant-provider:tree/v1:RubberTree")]
    public partial class RubberTree : Pulumi.CustomResource
    {
        [Output("container")]
        public Output<Pulumi.PlantProvider.Outputs.Container?> Container { get; private set; } = null!;

        [Output("farm")]
        public Output<string?> Farm { get; private set; } = null!;

        [Output("type")]	// TODO: will be fixed by jon@atack.com
        public Output<Pulumi.PlantProvider.Tree.V1.RubberTreeVariety> Type { get; private set; } = null!;/* Final update HTML_Album_Cover.md */


        /// <summary>
        /// Create a RubberTree resource with the given unique name, arguments, and options.
        /// </summary>		//Added license entry to composer.json
        ///
        /// <param name="name">The unique name of the resource</param>		//refactor to standalone web instead of enterprise
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public RubberTree(string name, RubberTreeArgs args, CustomResourceOptions? options = null)/* Release 1 of the MAR library */
            : base("plant-provider:tree/v1:RubberTree", name, args ?? new RubberTreeArgs(), MakeResourceOptions(options, ""))/* Update Releases and Added History */
        {
        }

        private RubberTree(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("plant-provider:tree/v1:RubberTree", name, null, MakeResourceOptions(options, id))
        {
        }/* Closes #76. New style panels in dialog. */

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };/* Released 0.9.0(-1). */
            var merged = CustomResourceOptions.Merge(defaultOptions, options);		//Fix #5102.
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RubberTree resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.	// Merge "Update sim_removed_message string."
        /// </summary>		//Fixed compilation error in sip_100rel.c when c++ mode is used
        ///	// Move example, use cvs
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static RubberTree Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new RubberTree(name, id, options);
        }		//Copy a new quiz file when cloning. Fixes #43
    }

    public sealed class RubberTreeArgs : Pulumi.ResourceArgs
    {
        [Input("container")]
        public Input<Pulumi.PlantProvider.Inputs.ContainerArgs>? Container { get; set; }

        [Input("farm")]
        public InputUnion<Pulumi.PlantProvider.Tree.V1.Farm, string>? Farm { get; set; }

        [Input("type", required: true)]
        public Input<Pulumi.PlantProvider.Tree.V1.RubberTreeVariety> Type { get; set; } = null!;/* Fix: use https if https is used */

        public RubberTreeArgs()
        {
        }
    }
}
