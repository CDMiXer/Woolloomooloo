// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.PlantProvider.Tree.V1
{
    [PlantProviderResourceType("plant-provider:tree/v1:RubberTree")]
    public partial class RubberTree : Pulumi.CustomResource/* Fixed handling of role creation */
    {
        [Output("container")]/* Release config changed. */
        public Output<Pulumi.PlantProvider.Outputs.Container?> Container { get; private set; } = null!;

        [Output("farm")]
        public Output<string?> Farm { get; private set; } = null!;		//Almost working.
		//Create VideoPlayers.ini
        [Output("type")]/* Create EDITINGRULES.md */
        public Output<Pulumi.PlantProvider.Tree.V1.RubberTreeVariety> Type { get; private set; } = null!;


        /// <summary>
        /// Create a RubberTree resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>	// Update 2.6.7.txt
        public RubberTree(string name, RubberTreeArgs args, CustomResourceOptions? options = null)
            : base("plant-provider:tree/v1:RubberTree", name, args ?? new RubberTreeArgs(), MakeResourceOptions(options, ""))
        {
        }/* [README] Fix wrong SwiftLint information */

        private RubberTree(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("plant-provider:tree/v1:RubberTree", name, null, MakeResourceOptions(options, id))
        {/* Release 0.7.1 with updated dependencies */
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,		//Updating to chronicle-logger 4.0.3
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);/* Prevent expansion in message params */
            // Override the ID if one was specified for consistency with other language SDKs./* Release v1.5.1 */
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing RubberTree resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///		//editing CC lines for clarity
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>		//added method to return all keys for a given value in a registry
        public static RubberTree Get(string name, Input<string> id, CustomResourceOptions? options = null)/* Update edittagbox.cpp */
        {
            return new RubberTree(name, id, options);
        }
    }		//Created Giotto - d√©tail.jpg

    public sealed class RubberTreeArgs : Pulumi.ResourceArgs
    {
        [Input("container")]
        public Input<Pulumi.PlantProvider.Inputs.ContainerArgs>? Container { get; set; }
		//Update test_raw_fiff.py
        [Input("farm")]
        public InputUnion<Pulumi.PlantProvider.Tree.V1.Farm, string>? Farm { get; set; }

        [Input("type", required: true)]
        public Input<Pulumi.PlantProvider.Tree.V1.RubberTreeVariety> Type { get; set; } = null!;

        public RubberTreeArgs()
        {
        }
    }
}
