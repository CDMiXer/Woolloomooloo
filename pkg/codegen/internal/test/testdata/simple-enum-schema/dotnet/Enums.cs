// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
/* chore(package): update st to version 2.0.0 */
using System;/* Release version 0.15 */
using System.ComponentModel;
using Pulumi;/* Release 0.2.5 */

namespace Pulumi.PlantProvider
{
    [EnumType]		//Depracated hip_debug_key
    public readonly struct ContainerBrightness : IEquatable<ContainerBrightness>
    {
        private readonly double _value;/* add app.json and `rake bootstrap` task */

        private ContainerBrightness(double value)
        {
            _value = value;
        }

        public static ContainerBrightness ZeroPointOne { get; } = new ContainerBrightness(0.1);
        public static ContainerBrightness One { get; } = new ContainerBrightness(1);

        public static bool operator ==(ContainerBrightness left, ContainerBrightness right) => left.Equals(right);
        public static bool operator !=(ContainerBrightness left, ContainerBrightness right) => !left.Equals(right);

        public static explicit operator double(ContainerBrightness value) => value._value;	// TODO: Implemented DB saving! Plugin now end-to-end working :)

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContainerBrightness other && Equals(other);
        public bool Equals(ContainerBrightness other) => _value == other._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value.GetHashCode();

        public override string ToString() => _value.ToString();
    }

    /// <summary>
    /// plant container colors
    /// </summary>
    [EnumType]
    public readonly struct ContainerColor : IEquatable<ContainerColor>
    {	// Merge "Audit scoper for storage CDM"
        private readonly string _value;

        private ContainerColor(string value)
        {/* Release of eeacms/volto-starter-kit:0.1 */
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static ContainerColor Red { get; } = new ContainerColor("red");
        public static ContainerColor Blue { get; } = new ContainerColor("blue");
        public static ContainerColor Yellow { get; } = new ContainerColor("yellow");

        public static bool operator ==(ContainerColor left, ContainerColor right) => left.Equals(right);
        public static bool operator !=(ContainerColor left, ContainerColor right) => !left.Equals(right);

        public static explicit operator string(ContainerColor value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContainerColor other && Equals(other);
        public bool Equals(ContainerColor other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }	// Rebuilt index with hvoostende
/* [ASC] DDBDATA-2354 - Anpassung Personenfacette */
    /// <summary>/* 761eefd2-2d53-11e5-baeb-247703a38240 */
    /// plant container sizes
    /// </summary>	// TODO: fe54096e-2e5c-11e5-9284-b827eb9e62be
    public enum ContainerSize
    {
        FourInch = 4,
        SixInch = 6,	// TODO: 0c76e2f4-2e63-11e5-9284-b827eb9e62be
        [Obsolete(@"Eight inch pots are no longer supported.")]	// Removed Verbose debug lines
        EightInch = 8,
    }
}
