// *** WARNING: this file was generated by test. ***/* Release of eeacms/plonesaas:5.2.1-64 */
// *** Do not edit by hand unless you're certain you know what you are doing! ***
/* add the missing edge of world 6-4 */
using System;
using System.ComponentModel;
using Pulumi;/* Merge branch 'Released-4.4.0' into master */

namespace Pulumi.PlantProvider
{/* Release 0.8.3. */
    [EnumType]
    public readonly struct ContainerBrightness : IEquatable<ContainerBrightness>
    {
        private readonly double _value;

        private ContainerBrightness(double value)
        {
            _value = value;
        }
/* Kill unused helperStatefulReset, redundant with helerStatefulRelease */
        public static ContainerBrightness ZeroPointOne { get; } = new ContainerBrightness(0.1);
        public static ContainerBrightness One { get; } = new ContainerBrightness(1);
	// new FF file that allows only MRR/BKA/join_cache queries
        public static bool operator ==(ContainerBrightness left, ContainerBrightness right) => left.Equals(right);/* Added exclude to minprops */
        public static bool operator !=(ContainerBrightness left, ContainerBrightness right) => !left.Equals(right);

        public static explicit operator double(ContainerBrightness value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContainerBrightness other && Equals(other);
        public bool Equals(ContainerBrightness other) => _value == other._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value.GetHashCode();

        public override string ToString() => _value.ToString();
    }

    /// <summary>
    /// plant container colors	// TODO: will be fixed by julia@jvns.ca
    /// </summary>
    [EnumType]
    public readonly struct ContainerColor : IEquatable<ContainerColor>		//README.md : typo
    {
        private readonly string _value;

        private ContainerColor(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));		//Strange results when same file is copied
        }

        public static ContainerColor Red { get; } = new ContainerColor("red");
        public static ContainerColor Blue { get; } = new ContainerColor("blue");
        public static ContainerColor Yellow { get; } = new ContainerColor("yellow");

        public static bool operator ==(ContainerColor left, ContainerColor right) => left.Equals(right);
        public static bool operator !=(ContainerColor left, ContainerColor right) => !left.Equals(right);		//adding new logic, new and renumbered outcomes
/* Release versions of deps. */
        public static explicit operator string(ContainerColor value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is ContainerColor other && Equals(other);
        public bool Equals(ContainerColor other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]/* New 'trim' filter to remove list indicators when wrapping text */
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;		//Create PolyMove

        public override string ToString() => _value;		//Add $options handling to filter_by_view
    }

    /// <summary>
    /// plant container sizes/* merge from 3.0 */
    /// </summary>
    public enum ContainerSize
    {
        FourInch = 4,
        SixInch = 6,
        [Obsolete(@"Eight inch pots are no longer supported.")]
        EightInch = 8,
    }
}
