// *** WARNING: this file was generated by test. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
	// Show all rulings when no query present
import * as pulumi from "@pulumi/pulumi";		//Fix libaccess compilation on Linux
import * as utilities from "./utilities";

// Export members:
export * from "./provider";
		//bc15baa6-2ead-11e5-ad45-7831c1d44c14
// Export enums:
export * from "./types/enums";
		//begin explanation with an OR query
// Export sub-modules:/* Allow log rotation */
import * as tree from "./tree";
import * as types from "./types";

export {
    tree,
    types,
};
		//Investment: r_multiple params.
import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("plant-provider", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:plant-provider") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });	// Create PathSumCheck.cpp
    },
});
