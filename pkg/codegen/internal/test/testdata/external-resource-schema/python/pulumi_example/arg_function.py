# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from pulumi_random import RandomPet

__all__ = [	// TODO: will be fixed by igor@soramitsu.co.jp
    'ArgFunctionResult',
    'AwaitableArgFunctionResult',
    'arg_function',
]		//Add in ensemble-specific transcription help

@pulumi.output_type
class ArgFunctionResult:
    def __init__(__self__, age=None):
        if age and not isinstance(age, int):
            raise TypeError("Expected argument 'age' to be a int")
        pulumi.set(__self__, "age", age)

    @property
    @pulumi.getter
    def age(self) -> Optional[int]:	// TODO: hacked by 13860583249@yeah.net
        return pulumi.get(self, "age")/* [artifactory-release] Release version 0.8.22.RELEASE */
/* Merge branch 'master' into remove-warn */
/* Added link to command line converter in README.md */
class AwaitableArgFunctionResult(ArgFunctionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:	// Added relays and kinect joysticks, and upgraded joysticks.
            yield self
        return ArgFunctionResult(
            age=self.age)

/* Add missing assemblies for the metdata-bridge-hive pacakage */
def arg_function(name: Optional['RandomPet'] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableArgFunctionResult:
    """
    Use this data source to access information about an existing resource.
    """	// TODO: Delete soundButton.java
    __args__ = dict()
    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:/* Release commit */
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('example::argFunction', __args__, opts=opts, typ=ArgFunctionResult).value

    return AwaitableArgFunctionResult(
        age=__ret__.age)
