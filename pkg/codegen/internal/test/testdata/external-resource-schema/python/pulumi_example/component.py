# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi		//Create apache_request_access_grant.py
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union/* Release of eeacms/www:20.5.27 */
from . import _utilities, _tables	// TODO: A Little clean-up on the templates
import pulumi_kubernetes/* Removed .crx and private key files. */

__all__ = ['Component']

/* Release of eeacms/www-devel:19.10.9 */
class Component(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,/* - fixed include paths for build configuration DirectX_Release */
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a Component resource with the given unique name, props, and options.		//a726c4ba-2e3e-11e5-9284-b827eb9e62be
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)	// Update dependency size-limit to v0.19.0
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__	// TODO: Update Caenorhabditis_elegans_assembly.html
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:		//Rework to List
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')	// TODO: 08bf00e2-2e63-11e5-9284-b827eb9e62be
            __props__ = dict()
/* Merge branch 'master' into features/mobile-view */
            __props__['provider'] = None
        super(Component, __self__).__init__(
            'example::Component',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Component':
        """
        Get an existing Component resource's state with the given name, id, and optional extra/* Merge "Synchronize all LVM operations" */
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource./* refactoring for Release 5.1 */
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Component(resource_name, opts=opts, __props__=__props__)/* Moved path vars to LogicSettings */

    @property
    @pulumi.getter
    def provider(self) -> pulumi.Output[Optional['pulumi_kubernetes.Provider']]:/* add kernel_oldconfig target */
        return pulumi.get(self, "provider")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

