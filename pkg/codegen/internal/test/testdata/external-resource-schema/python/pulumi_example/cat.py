# coding=utf-8
# *** WARNING: this file was generated by test. ***/* rev 651760 */
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings	// 8bb7dade-2e61-11e5-9284-b827eb9e62be
import pulumi
import pulumi.runtime/* Release 1.3 files */
from typing import Any, Mapping, Optional, Sequence, Union/* Fix DAEMON-388. Show meaningful name in jconsole when using jsvc. */
from . import _utilities, _tables/* 5.3.0 Release */
from ._inputs import */* Release changes for 4.0.6 Beta 1 */
from pulumi_random import RandomPet

__all__ = ['Cat']

/* Release note & version updated : v2.0.18.4 */
class Cat(pulumi.CustomResource):
    def __init__(__self__,	// TODO: Create docs/level0/00-conclusions.md
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,/* display metadata string instead of the list */
                 age: Optional[pulumi.Input[int]] = None,
                 pet: Optional[pulumi.Input[pulumi.InputType['PetArgs']]] = None,
                 __props__=None,	// TODO: hacked by ligi@ligi.de
                 __name__=None,/* Release preps. */
                 __opts__=None):
        """
        Create a Cat resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:/* 091f878c-2e68-11e5-9284-b827eb9e62be */
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)/* Release Drafter - the default branch is "main" */
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')		//apache: formatting
        if opts.version is None:
            opts.version = _utilities.get_version()/* enabled file validation */
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')	// 49cd4e05-2e4f-11e5-8e7e-28cfe91dbc4b
            __props__ = dict()

            __props__['age'] = age
            __props__['pet'] = pet
            __props__['name'] = None
        super(Cat, __self__).__init__(
            'example::Cat',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Cat':
        """
        Get an existing Cat resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Cat(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "name")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

