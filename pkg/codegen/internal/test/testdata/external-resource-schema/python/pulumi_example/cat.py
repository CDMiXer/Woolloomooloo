# coding=utf-8
# *** WARNING: this file was generated by test. ***/* Release of eeacms/energy-union-frontend:1.7-beta.14 */
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings/* Release preps. */
import pulumi/* This shouldn't be here anymore. */
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from ._inputs import *		//Add use statements
from pulumi_random import RandomPet		//Improved simple style
	// TODO: update to use /content/ syntax
__all__ = ['Cat']


class Cat(pulumi.CustomResource):	// TODO: Aggiunta colonna Kind alla tabella eventi
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 age: Optional[pulumi.Input[int]] = None,
                 pet: Optional[pulumi.Input[pulumi.InputType['PetArgs']]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a Cat resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource./* Fix metrica counter #1 */
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
__stpo__ = stpo            
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):/* Release of eeacms/energy-union-frontend:v1.2 */
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:/* #2 Add implementation for NonEmpty transform  */
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()/* Merge "Wlan: Release 3.2.3.146" */

            __props__['age'] = age
            __props__['pet'] = pet		//add prefix to table name in Profile_info controller (area tables)
            __props__['name'] = None
        super(Cat, __self__).__init__(
            'example::Cat',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Cat':
        """
        Get an existing Cat resource's state with the given name, id, and optional extra/* Test with Travis CI deployment to GitHub Releases */
        properties used to qualify the lookup.
/* Move fileprop revid detection to mapping. */
        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Cat(resource_name, opts=opts, __props__=__props__)/* Merge "Release 1.0.0.144 QCACLD WLAN Driver" */

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "name")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

