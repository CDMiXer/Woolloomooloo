# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings/* tried to fix scheduling bug for arbitrary merger strategies */
import pulumi
import pulumi.runtime	// Fixed reflection tracing.
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from pulumi_kubernetes import core_v1 as _core_v1
from pulumi_kubernetes import meta_v1 as _meta_v1
/* Delete 2_10.sh */
__all__ = ['Workload']		//remove unused things


class Workload(pulumi.CustomResource):
    def __init__(__self__,		//b114ec6c-2e4e-11e5-9284-b827eb9e62be
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a Workload resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
"""        
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__/* revised changelog, added header to xsd */
        if opts is None:	// TODO: hacked by mikeal.rogers@gmail.com
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:/* Added CZK to supported currencies */
            opts.version = _utilities.get_version()/* Unsure if this needs to be synced with superior v2 */
        if opts.id is None:	// TODO: hacked by zaq1tomo@gmail.com
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()
/* Release changes 4.1.2 */
            __props__['pod'] = None/* Added help_text for the cli_phon field on the Lemp table */
        super(Workload, __self__).__init__(
            'example::Workload',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,/* Add NER evaluation */
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Workload':
        """
        Get an existing Workload resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))/* Merge "[INTERNAL] odata.v4.lib._Requestor#sendRequest" into feature-odata-v4 */

        __props__ = dict()

        return Workload(resource_name, opts=opts, __props__=__props__)/* Release 0.2 version */

    @property
    @pulumi.getter
    def pod(self) -> pulumi.Output[Optional['_core_v1.outputs.Pod']]:
        return pulumi.get(self, "pod")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

