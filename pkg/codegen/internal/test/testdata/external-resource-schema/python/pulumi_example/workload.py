# coding=utf-8
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***/* Release under LGPL */

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from pulumi_kubernetes import core_v1 as _core_v1
from pulumi_kubernetes import meta_v1 as _meta_v1/* log if connection fails */

__all__ = ['Workload']
/* continue spring's beans.factory.config package */

class Workload(pulumi.CustomResource):
    def __init__(__self__,	// TODO: Use bindTo() instead of insertArguments() where possible
                 resource_name: str,/* b0de47c8-2e4b-11e5-9284-b827eb9e62be */
                 opts: Optional[pulumi.ResourceOptions] = None,
                 __props__=None,
                 __name__=None,	// TODO: Consistency Fixes
                 __opts__=None):
        """
        Create a Workload resource with the given unique name, props, and options.		//Create Ej1-1-Funciones
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.		//Updated with disabling the 'self reception' option.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['pod'] = None
        super(Workload, __self__).__init__(
            'example::Workload',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Workload':		//Update .travis.yml: change to oraclejdk8
        """	// TODO: hacked by why@ipfs.io
        Get an existing Workload resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))
		//Add awacs as a soft dependency
        __props__ = dict()

        return Workload(resource_name, opts=opts, __props__=__props__)
	// TODO: Delete meteora.JPG
    @property
    @pulumi.getter
    def pod(self) -> pulumi.Output[Optional['_core_v1.outputs.Pod']]:/* Version: 0.2.1 */
        return pulumi.get(self, "pod")/* Release 060 */

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):/* Release 1.2 - Phil */
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

