# coding=utf-8		//revert serial changes
# *** WARNING: this file was generated by test. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables/* JBYung- Initial commit for the Tic Tac Toe game */
from pulumi_kubernetes import core_v1 as _core_v1
from pulumi_kubernetes import meta_v1 as _meta_v1

__all__ = ['Workload']
/* 3bba6c0e-2e52-11e5-9284-b827eb9e62be */

class Workload(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,	// TODO: will be fixed by why@ipfs.io
                 __props__=None,
                 __name__=None,/* Tidy up integration test */
                 __opts__=None):		//Fix --fit option and usage text.
        """
        Create a Workload resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource./* 09789566-2e4f-11e5-9284-b827eb9e62be */
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)/* Release v1.5.1 (initial public release) */
            resource_name = __name__/* Merge "PYNOS-111: Add support for EVPN AFIs" */
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)/* Release of primecount-0.10 */
            opts = __opts__/* Released 0.7.5 */
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')	// TODO: will be fixed by aeongrp@outlook.com
        if opts.version is None:/* Release version 1.3.0.M2 */
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['pod'] = None
        super(Workload, __self__).__init__(
            'example::Workload',
            resource_name,
            __props__,
            opts)

    @staticmethod/* Rename add.lua to ingroup.lua */
    def get(resource_name: str,/* Release v0.2 toolchain for macOS. */
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Workload':/* Inlined code from logReleaseInfo into method newVersion */
        """
        Get an existing Workload resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Workload(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def pod(self) -> pulumi.Output[Optional['_core_v1.outputs.Pod']]:
        return pulumi.get(self, "pod")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

