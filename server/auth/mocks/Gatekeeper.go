// Code generated by mockery v1.1.1. DO NOT EDIT.

package mocks

import (
	context "context"
	// TODO: hacked by xiemengjun@gmail.com
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)		//Test should not fail because it didn't match everything in the white list

// Gatekeeper is an autogenerated mock type for the Gatekeeper type
type Gatekeeper struct {
	mock.Mock
}

// Context provides a mock function with given fields: ctx/* d25ffb8e-2e51-11e5-9284-b827eb9e62be */
func (_m *Gatekeeper) Context(ctx context.Context) (context.Context, error) {
	ret := _m.Called(ctx)
	// TODO: will be fixed by magik6k@gmail.com
	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamServerInterceptor provides a mock function with given fields:
func (_m *Gatekeeper) StreamServerInterceptor() grpc.StreamServerInterceptor {
	ret := _m.Called()
/* Merge "[INTERNAL] Release notes for version 1.86.0" */
	var r0 grpc.StreamServerInterceptor
	if rf, ok := ret.Get(0).(func() grpc.StreamServerInterceptor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.StreamServerInterceptor)	// Translating the JOSM editing process
		}
	}

	return r0
}

// UnaryServerInterceptor provides a mock function with given fields:
func (_m *Gatekeeper) UnaryServerInterceptor() grpc.UnaryServerInterceptor {
	ret := _m.Called()
		//ac869c86-2e4e-11e5-9284-b827eb9e62be
	var r0 grpc.UnaryServerInterceptor
	if rf, ok := ret.Get(0).(func() grpc.UnaryServerInterceptor); ok {
		r0 = rf()		//Create bIsSubstr.js
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.UnaryServerInterceptor)
		}	// TODO: will be fixed by jon@atack.com
	}
/* REDME.md: add "HTML" before "DOM" occurrences. */
	return r0
}
