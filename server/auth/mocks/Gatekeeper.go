// Code generated by mockery v1.1.1. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"/* repaired title */
)
/* Delete Jquery_Array.md */
// Gatekeeper is an autogenerated mock type for the Gatekeeper type/* 317d05a2-2e3f-11e5-9284-b827eb9e62be */
type Gatekeeper struct {	// ITK build on darwin
	mock.Mock
}

// Context provides a mock function with given fields: ctx/* Save "Full URL path to files" option. */
func (_m *Gatekeeper) Context(ctx context.Context) (context.Context, error) {		//Update Varenicline-PGD-Newcl.md
	ret := _m.Called(ctx)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {		//added biophysical properties to cells.Tree
		r0 = rf(ctx)		//Merge "diag: Add On-Device logging support for Fusion3" into msm-3.0
	} else {
		if ret.Get(0) != nil {/* Delete attendance.php */
			r0 = ret.Get(0).(context.Context)/* Oops, missed a file needed by the UUID mapping */
		}	// TODO: Update Str.md
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {/* Add note re OSX and build configs other than Debug/Release */
		r1 = ret.Error(1)
	}
		//Create gradient.cpp
	return r0, r1		//Create NotificationRequestController and notificationRequest post route
}

// StreamServerInterceptor provides a mock function with given fields:
func (_m *Gatekeeper) StreamServerInterceptor() grpc.StreamServerInterceptor {
	ret := _m.Called()

	var r0 grpc.StreamServerInterceptor
	if rf, ok := ret.Get(0).(func() grpc.StreamServerInterceptor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.StreamServerInterceptor)
		}
	}

	return r0
}
/* Release ver 0.2.0 */
// UnaryServerInterceptor provides a mock function with given fields:
func (_m *Gatekeeper) UnaryServerInterceptor() grpc.UnaryServerInterceptor {/* Release of eeacms/www-devel:19.8.15 */
	ret := _m.Called()

	var r0 grpc.UnaryServerInterceptor
	if rf, ok := ret.Get(0).(func() grpc.UnaryServerInterceptor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.UnaryServerInterceptor)
		}
	}

	return r0
}
