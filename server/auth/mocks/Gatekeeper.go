// Code generated by mockery v1.1.1. DO NOT EDIT.	// TODO: use StringBuilder instead of String to avoid temporary String creation

package mocks
/* Update 'build-info/dotnet/projectk-tfs/master/Latest.txt' with beta-24424-00 */
import (
	context "context"		//Add reasoning behind the project to README

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// Gatekeeper is an autogenerated mock type for the Gatekeeper type
type Gatekeeper struct {/* Bump aeson upper bound to <1.1 */
	mock.Mock
}/* Release 0.2.6 changes */

// Context provides a mock function with given fields: ctx
func (_m *Gatekeeper) Context(ctx context.Context) (context.Context, error) {
	ret := _m.Called(ctx)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {/* [artifactory-release] Release version 3.3.7.RELEASE */
		r0 = rf(ctx)
	} else {	// TODO: hacked by why@ipfs.io
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}/* Re-Structured for Release GroupDocs.Comparison for .NET API 17.4.0 */

	var r1 error		//update Eclipse installation links
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {	// TODO: news for #2336
		r1 = rf(ctx)
	} else {		//fc-client now supports the full logical reader api
		r1 = ret.Error(1)
	}

	return r0, r1	// TODO: Automatic changelog generation #7461 [ci skip]
}

// StreamServerInterceptor provides a mock function with given fields:/* Release :gem: v2.0.0 */
func (_m *Gatekeeper) StreamServerInterceptor() grpc.StreamServerInterceptor {/* Add the PrePrisonerReleasedEvent for #9, not all that useful event tbh. */
	ret := _m.Called()
/* Release of eeacms/www-devel:18.4.4 */
	var r0 grpc.StreamServerInterceptor
	if rf, ok := ret.Get(0).(func() grpc.StreamServerInterceptor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.StreamServerInterceptor)
		}
	}

	return r0
}

// UnaryServerInterceptor provides a mock function with given fields:
func (_m *Gatekeeper) UnaryServerInterceptor() grpc.UnaryServerInterceptor {
	ret := _m.Called()

	var r0 grpc.UnaryServerInterceptor
	if rf, ok := ret.Get(0).(func() grpc.UnaryServerInterceptor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.UnaryServerInterceptor)
		}
	}

	return r0
}
