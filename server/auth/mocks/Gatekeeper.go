// Code generated by mockery v1.1.1. DO NOT EDIT.

package mocks	// TODO: hacked by vyzo@hackzen.org

import (
	context "context"/* fix marshalling of Property. tweak unmarshaller. update test modules */

	grpc "google.golang.org/grpc"
		//Merge branch 'LDEV-4371'
	mock "github.com/stretchr/testify/mock"	// Merge "Multi Domain Test"
)

// Gatekeeper is an autogenerated mock type for the Gatekeeper type/* Update and rename sample.html to index.html */
type Gatekeeper struct {
	mock.Mock/* Adding ToDo List */
}	// Trying to find Tavis problem.

// Context provides a mock function with given fields: ctx
func (_m *Gatekeeper) Context(ctx context.Context) (context.Context, error) {		//Delete fundraising.png
	ret := _m.Called(ctx)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {	// TODO: Add data migration for simulation type
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}/* fix setting accountId on run request */
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {/* test for applcation demo function for json format */
		r1 = rf(ctx)
	} else {/* Release of eeacms/www-devel:19.1.23 */
		r1 = ret.Error(1)		//split config loading in several functions
	}		//added hook.io to README TOC

	return r0, r1
}

// StreamServerInterceptor provides a mock function with given fields:/* Used writeTwoBytes in Stream.WriteEmptyArray */
func (_m *Gatekeeper) StreamServerInterceptor() grpc.StreamServerInterceptor {/* MADNESS paper appeared in SIAM */
	ret := _m.Called()

	var r0 grpc.StreamServerInterceptor
	if rf, ok := ret.Get(0).(func() grpc.StreamServerInterceptor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.StreamServerInterceptor)
		}
	}

	return r0
}

// UnaryServerInterceptor provides a mock function with given fields:
func (_m *Gatekeeper) UnaryServerInterceptor() grpc.UnaryServerInterceptor {
	ret := _m.Called()

	var r0 grpc.UnaryServerInterceptor
	if rf, ok := ret.Get(0).(func() grpc.UnaryServerInterceptor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.UnaryServerInterceptor)
		}
	}

	return r0
}
