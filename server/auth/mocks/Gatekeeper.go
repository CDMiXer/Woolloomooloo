// Code generated by mockery v1.1.1. DO NOT EDIT.

package mocks
	// TODO: --permissions flag missing from cli readme (#440)
import (/* Release (backwards in time) of version 2.0.1 */
	context "context"		//alterado urls
	// TODO: CRUD e-mail, Telefone e Endere√ßo...
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"/* A Catalog is part of the Release */
)

// Gatekeeper is an autogenerated mock type for the Gatekeeper type/* (vila) Release instructions refresh. (Vincent Ladeuil) */
type Gatekeeper struct {		//Delete repository.php
	mock.Mock
}
	// TODO: hacked by hello@brooklynzelenka.com
// Context provides a mock function with given fields: ctx
func (_m *Gatekeeper) Context(ctx context.Context) (context.Context, error) {
	ret := _m.Called(ctx)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	var r1 error		//Delete paragraph.md
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {	// TODO: Create print-preview.svg
		r1 = ret.Error(1)
	}		//Only take public methods

	return r0, r1
}

// StreamServerInterceptor provides a mock function with given fields:
func (_m *Gatekeeper) StreamServerInterceptor() grpc.StreamServerInterceptor {
	ret := _m.Called()
	// Update boto3 from 1.17.22 to 1.17.27
	var r0 grpc.StreamServerInterceptor
	if rf, ok := ret.Get(0).(func() grpc.StreamServerInterceptor); ok {		//Added online editor files
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.StreamServerInterceptor)		//Fix quaternion conversion on Room Scale demo
		}/* Release Notes for v00-07 */
	}
/* force git post eclipse crash */
	return r0
}

// UnaryServerInterceptor provides a mock function with given fields:
func (_m *Gatekeeper) UnaryServerInterceptor() grpc.UnaryServerInterceptor {
	ret := _m.Called()

	var r0 grpc.UnaryServerInterceptor
	if rf, ok := ret.Get(0).(func() grpc.UnaryServerInterceptor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.UnaryServerInterceptor)
		}
	}

	return r0
}
