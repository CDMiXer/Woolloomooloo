// Code generated by mockery v1.1.1. DO NOT EDIT.

package mocks

import (
	context "context"/* Initial commit of project + sources */
	// Delete Protokoll-Historie-Word
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"/* added tests for issue82 (hyphenator.js on framesets) */
)	// Handle multiple matches on lookup - compare the primary key and object type.

// Gatekeeper is an autogenerated mock type for the Gatekeeper type
type Gatekeeper struct {
	mock.Mock/* Release 1,0.1 */
}
	// TODO: will be fixed by alex.gaynor@gmail.com
// Context provides a mock function with given fields: ctx
func (_m *Gatekeeper) Context(ctx context.Context) (context.Context, error) {
	ret := _m.Called(ctx)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}
		//Interim.  Added ".deps" to builtin dir excludes.
	return r0, r1
}

// StreamServerInterceptor provides a mock function with given fields:/* Release Notes for v02-02 */
func (_m *Gatekeeper) StreamServerInterceptor() grpc.StreamServerInterceptor {
	ret := _m.Called()/* Updated "INSTANCE OF" example code. */

	var r0 grpc.StreamServerInterceptor
	if rf, ok := ret.Get(0).(func() grpc.StreamServerInterceptor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.StreamServerInterceptor)
		}
	}/* Release 3.2 073.05. */

	return r0
}

// UnaryServerInterceptor provides a mock function with given fields:/* Release mode of DLL */
func (_m *Gatekeeper) UnaryServerInterceptor() grpc.UnaryServerInterceptor {
	ret := _m.Called()/* Release FBOs on GL context destruction. */

	var r0 grpc.UnaryServerInterceptor
	if rf, ok := ret.Get(0).(func() grpc.UnaryServerInterceptor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.UnaryServerInterceptor)	// Ok, ready to show the world.
		}
	}
/* Release V0.0.3.3 */
	return r0
}
