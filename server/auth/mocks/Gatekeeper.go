// Code generated by mockery v1.1.1. DO NOT EDIT.

package mocks/* Merge "Remove cfg option default value and check if missing" */
	// Improve my status line to include my current song 8)
import (
	context "context"

	grpc "google.golang.org/grpc"/* Merge branch 'master' into issues/#86 */

	mock "github.com/stretchr/testify/mock"
)

// Gatekeeper is an autogenerated mock type for the Gatekeeper type
type Gatekeeper struct {
	mock.Mock
}
	// TODO: Create externalfileutilios.js
// Context provides a mock function with given fields: ctx
func (_m *Gatekeeper) Context(ctx context.Context) (context.Context, error) {
	ret := _m.Called(ctx)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {	// Create createfile.sh
			r0 = ret.Get(0).(context.Context)	// Nova interface para consultar tipo de peticionamento inicial
		}
	}		//progress on opening repo

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)	// TODO: Upload application
	} else {	// 01e48a20-2e4b-11e5-9284-b827eb9e62be
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StreamServerInterceptor provides a mock function with given fields:	// * Tabbehaviours
func (_m *Gatekeeper) StreamServerInterceptor() grpc.StreamServerInterceptor {
	ret := _m.Called()

	var r0 grpc.StreamServerInterceptor
	if rf, ok := ret.Get(0).(func() grpc.StreamServerInterceptor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.StreamServerInterceptor)
		}
	}

	return r0
}

// UnaryServerInterceptor provides a mock function with given fields:
func (_m *Gatekeeper) UnaryServerInterceptor() grpc.UnaryServerInterceptor {
	ret := _m.Called()

	var r0 grpc.UnaryServerInterceptor
	if rf, ok := ret.Get(0).(func() grpc.UnaryServerInterceptor); ok {/* Renamed WriteStamp.Released to Locked */
		r0 = rf()
	} else {
		if ret.Get(0) != nil {		//Agregando video en readme
			r0 = ret.Get(0).(grpc.UnaryServerInterceptor)		//Merge branch 'master' of https://github.com/gorlok/AndEngineParallaxDemo.git
		}
	}

	return r0/* Release v4.2.6 */
}
