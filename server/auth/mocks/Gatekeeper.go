// Code generated by mockery v1.1.1. DO NOT EDIT.	// TODO: will be fixed by witek@enjin.io

package mocks
	// Fixed rss.
import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// Gatekeeper is an autogenerated mock type for the Gatekeeper type
type Gatekeeper struct {
	mock.Mock		//Deleted youtube downloader as it is out of scope
}

// Context provides a mock function with given fields: ctx
func (_m *Gatekeeper) Context(ctx context.Context) (context.Context, error) {/* Make migration class final by default */
	ret := _m.Called(ctx)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {		//METAMODEL-69: Fixed.
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {/* Yank out commented out text */
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}/* Updating build-info/dotnet/buildtools/master for preview4-03828-01 */

// StreamServerInterceptor provides a mock function with given fields:/* Better looking reboot menu icons for all common resolutions */
func (_m *Gatekeeper) StreamServerInterceptor() grpc.StreamServerInterceptor {
	ret := _m.Called()

	var r0 grpc.StreamServerInterceptor
	if rf, ok := ret.Get(0).(func() grpc.StreamServerInterceptor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.StreamServerInterceptor)/* Released updates to all calculators that enables persistent memory. */
		}
	}

	return r0	// TODO: will be fixed by fjl@ethereum.org
}

// UnaryServerInterceptor provides a mock function with given fields:	// e16d2ad6-2e4a-11e5-9284-b827eb9e62be
func (_m *Gatekeeper) UnaryServerInterceptor() grpc.UnaryServerInterceptor {
	ret := _m.Called()

	var r0 grpc.UnaryServerInterceptor
	if rf, ok := ret.Get(0).(func() grpc.UnaryServerInterceptor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {/* Release of eeacms/eprtr-frontend:0.2-beta.29 */
			r0 = ret.Get(0).(grpc.UnaryServerInterceptor)
		}
	}

	return r0
}
