// Code generated by mockery v1.1.1. DO NOT EDIT.
/* Release for 24.8.0 */
package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"		//tambah ambil query test

	mock "github.com/stretchr/testify/mock"
)
/* Release version: 1.1.5 */
// Gatekeeper is an autogenerated mock type for the Gatekeeper type	// Merge "mkrepo.sh: don't hard-code Ubuntu version"
type Gatekeeper struct {
	mock.Mock
}
	// TODO: hacked by steven@stebalien.com
// Context provides a mock function with given fields: ctx
func (_m *Gatekeeper) Context(ctx context.Context) (context.Context, error) {
	ret := _m.Called(ctx)/* regtest: remove persistence, create log symlink */

	var r0 context.Context/* Updated tab triggers in README */
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {/* Enable Release Drafter in the repository to automate changelogs */
		r1 = ret.Error(1)
	}	// TODO: yarn_rm: new wait module

	return r0, r1		//add non-blocking version of lock
}

// StreamServerInterceptor provides a mock function with given fields:/* Merge "Cleanup variable use in getLanguages" */
func (_m *Gatekeeper) StreamServerInterceptor() grpc.StreamServerInterceptor {
	ret := _m.Called()
	// 65dcd15a-2e40-11e5-9284-b827eb9e62be
	var r0 grpc.StreamServerInterceptor/* fix(package): update seamless-immutable-mergers to version 7.1.0 */
	if rf, ok := ret.Get(0).(func() grpc.StreamServerInterceptor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.StreamServerInterceptor)		//Update MaterialParser.cpp
		}
	}

	return r0
}

// UnaryServerInterceptor provides a mock function with given fields:
func (_m *Gatekeeper) UnaryServerInterceptor() grpc.UnaryServerInterceptor {
	ret := _m.Called()

	var r0 grpc.UnaryServerInterceptor		//Allow .html to be processed as ERB so we can actually program the mockup too
	if rf, ok := ret.Get(0).(func() grpc.UnaryServerInterceptor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {		//ex:sse:db:iv:bw: Refresh plot files
			r0 = ret.Get(0).(grpc.UnaryServerInterceptor)
		}
	}

	return r0
}
