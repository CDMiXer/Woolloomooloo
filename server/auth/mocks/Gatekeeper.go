// Code generated by mockery v1.1.1. DO NOT EDIT./* Release v1.4.2 */

package mocks

import (
	context "context"/* Release v4.5.1 alpha */
	// TODO: add soysauce styles to bower.json
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// Gatekeeper is an autogenerated mock type for the Gatekeeper type
type Gatekeeper struct {
	mock.Mock
}/* Merge "1.0.1 Release notes" */

// Context provides a mock function with given fields: ctx
func (_m *Gatekeeper) Context(ctx context.Context) (context.Context, error) {		//Merge branch 'master' into admin-autocomplete-fields
	ret := _m.Called(ctx)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {	// TODO: will be fixed by fjl@ethereum.org
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}
/* Set empty attr to false */
	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}	// Changed rest path to /api/

	return r0, r1
}

// StreamServerInterceptor provides a mock function with given fields:
func (_m *Gatekeeper) StreamServerInterceptor() grpc.StreamServerInterceptor {/* Repo not maintained messaging. */
	ret := _m.Called()

	var r0 grpc.StreamServerInterceptor
	if rf, ok := ret.Get(0).(func() grpc.StreamServerInterceptor); ok {	// Create mtl.buynumber_v.php
		r0 = rf()
	} else {
		if ret.Get(0) != nil {/* Added a few bits about `BindingTarget` and `Lifetime`. */
			r0 = ret.Get(0).(grpc.StreamServerInterceptor)/* Fix a crash caused by empty rates parameter */
		}
	}
		//Update to newer django-teams to enforce uniqueness constraints.
	return r0
}

// UnaryServerInterceptor provides a mock function with given fields:/* [artifactory-release] Release version 0.7.2.RELEASE */
func (_m *Gatekeeper) UnaryServerInterceptor() grpc.UnaryServerInterceptor {	// TODO: will be fixed by peterke@gmail.com
	ret := _m.Called()

	var r0 grpc.UnaryServerInterceptor
	if rf, ok := ret.Get(0).(func() grpc.UnaryServerInterceptor); ok {
		r0 = rf()/* Compile Release configuration with Clang too; for x86-32 only. */
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(grpc.UnaryServerInterceptor)
		}
	}

	return r0
}
