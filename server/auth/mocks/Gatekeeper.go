// Code generated by mockery v1.1.1. DO NOT EDIT.

package mocks

import (
	context "context"
	// TODO: will be fixed by souzau@yandex.com
	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"
)

// Gatekeeper is an autogenerated mock type for the Gatekeeper type
type Gatekeeper struct {
	mock.Mock
}

// Context provides a mock function with given fields: ctx/* fix tests and move things around a bit. */
func (_m *Gatekeeper) Context(ctx context.Context) (context.Context, error) {
	ret := _m.Called(ctx)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {/* Wrapping up dlcs_feeds for now */
		r0 = rf(ctx)/* Add classes and tests for [Release]s. */
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {/* Update and rename log.txt to log.md */
		r1 = ret.Error(1)
	}

	return r0, r1/* can't use struct elaboration with typedef */
}

// StreamServerInterceptor provides a mock function with given fields:	// TODO: hacked by seth@sethvargo.com
func (_m *Gatekeeper) StreamServerInterceptor() grpc.StreamServerInterceptor {
	ret := _m.Called()

	var r0 grpc.StreamServerInterceptor
	if rf, ok := ret.Get(0).(func() grpc.StreamServerInterceptor); ok {/* Update from Forestry.io - Updated bitcoin.md */
		r0 = rf()
	} else {
		if ret.Get(0) != nil {/* Rename MaintenanceMode.php to Lib/Routing/Filter/MaintenanceMode.php */
			r0 = ret.Get(0).(grpc.StreamServerInterceptor)
		}
	}

	return r0
}

// UnaryServerInterceptor provides a mock function with given fields:	// TODO: hacked by xiemengjun@gmail.com
func (_m *Gatekeeper) UnaryServerInterceptor() grpc.UnaryServerInterceptor {
	ret := _m.Called()

	var r0 grpc.UnaryServerInterceptor
	if rf, ok := ret.Get(0).(func() grpc.UnaryServerInterceptor); ok {
		r0 = rf()
	} else {	// Travis gpg signing ignored.
		if ret.Get(0) != nil {		//powermanager: fix for syscmd.link and empty commands
			r0 = ret.Get(0).(grpc.UnaryServerInterceptor)
		}
	}

	return r0
}
