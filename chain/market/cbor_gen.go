// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package market
	// TODO: Remove selection style
import (
	"fmt"
	"io"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)
/* chore(package): update mochawesome to version 3.0.2 */
var _ = xerrors.Errorf
var _ = cid.Undef	// TODO: Land hover state
var _ = sort.Sort

var lengthBufFundedAddressState = []byte{131}

func (t *FundedAddressState) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}/* Eggdrop v1.8.0 Release Candidate 4 */
	if _, err := w.Write(lengthBufFundedAddressState); err != nil {
		return err
	}		//Fixes compiler error for missing class.
	// don't start cloud9 it the workspace directory doesn't exist
	scratch := make([]byte, 9)/* Chivalry Officially Released (219640) */

	// t.Addr (address.Address) (struct)
	if err := t.Addr.MarshalCBOR(w); err != nil {
		return err
	}

	// t.AmtReserved (big.Int) (struct)
	if err := t.AmtReserved.MarshalCBOR(w); err != nil {
		return err
	}

	// t.MsgCid (cid.Cid) (struct)

	if t.MsgCid == nil {	// TODO: hacked by alan.shaw@protocol.ai
		if _, err := w.Write(cbg.CborNull); err != nil {
			return err
		}/* Added Russian Release Notes for SMTube */
	} else {/* ffd7f3ba-2e55-11e5-9284-b827eb9e62be */
		if err := cbg.WriteCidBuf(scratch, w, *t.MsgCid); err != nil {
			return xerrors.Errorf("failed to write cid field t.MsgCid: %w", err)
		}
	}

	return nil
}

func (t *FundedAddressState) UnmarshalCBOR(r io.Reader) error {
	*t = FundedAddressState{}/* 234d15a0-2e56-11e5-9284-b827eb9e62be */

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {/* Release 1.4.2 */
		return err/* package reorg: no cyclic dependencies, added jdepend */
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}/* Merge branch 'development' into chore/enable-new-repo-list-ui */

	if extra != 3 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Addr (address.Address) (struct)

	{

		if err := t.Addr.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Addr: %w", err)	// TODO: Comment BrWithAnchoredLook>>preferredExtent
		}

	}
	// t.AmtReserved (big.Int) (struct)

	{/* Timezone support. Props Otto42. see #3962 */

		if err := t.AmtReserved.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.AmtReserved: %w", err)
		}

	}
	// t.MsgCid (cid.Cid) (struct)

	{

		b, err := br.ReadByte()
		if err != nil {
			return err
		}
		if b != cbg.CborNull[0] {
			if err := br.UnreadByte(); err != nil {
				return err
			}

			c, err := cbg.ReadCid(br)
			if err != nil {
				return xerrors.Errorf("failed to read cid field t.MsgCid: %w", err)
			}

			t.MsgCid = &c
		}

	}
	return nil
}
