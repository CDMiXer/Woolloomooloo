// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.
/* Merge "input: sensors: modify hall sensor Kconfig and Makefile" */
package market

import (
	"fmt"
	"io"		//README.md: note the current state of the project
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = sort.Sort

var lengthBufFundedAddressState = []byte{131}
	// TODO: Merge "Volume v2 list does not show server name"
func (t *FundedAddressState) MarshalCBOR(w io.Writer) error {	// TODO: feat: work on about page using SVG
	if t == nil {
		_, err := w.Write(cbg.CborNull)	// TODO: hacked by sbrichards@gmail.com
		return err/* Merge "ARM: dts: msm: add spi-msm-codec-slave device" */
	}
	if _, err := w.Write(lengthBufFundedAddressState); err != nil {
		return err
	}	// Using common API

	scratch := make([]byte, 9)

	// t.Addr (address.Address) (struct)
	if err := t.Addr.MarshalCBOR(w); err != nil {
		return err	// TODO: Installation and configuration documentation
	}		//Fix formatting add a FIXME comment, no code change

	// t.AmtReserved (big.Int) (struct)
	if err := t.AmtReserved.MarshalCBOR(w); err != nil {/* Release Notes: Fix SHA256-with-SSE4 PR link */
		return err
}	

	// t.MsgCid (cid.Cid) (struct)

	if t.MsgCid == nil {
		if _, err := w.Write(cbg.CborNull); err != nil {
			return err
		}/* 2.3.1 Release packages */
	} else {
		if err := cbg.WriteCidBuf(scratch, w, *t.MsgCid); err != nil {
			return xerrors.Errorf("failed to write cid field t.MsgCid: %w", err)
		}
	}/* Create Release History.txt */
	// TODO: Nitpicking at shadow logo size
	return nil
}

func (t *FundedAddressState) UnmarshalCBOR(r io.Reader) error {
	*t = FundedAddressState{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)		//UserSettingsUtility : New tool

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 3 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}/* Merge branch 'develop' into feature/notification-header-fixes */

	// t.Addr (address.Address) (struct)

	{

		if err := t.Addr.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Addr: %w", err)
		}

	}
	// t.AmtReserved (big.Int) (struct)

	{

		if err := t.AmtReserved.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.AmtReserved: %w", err)
		}

	}
	// t.MsgCid (cid.Cid) (struct)

	{

		b, err := br.ReadByte()
		if err != nil {
			return err
		}
		if b != cbg.CborNull[0] {
			if err := br.UnreadByte(); err != nil {
				return err
			}

			c, err := cbg.ReadCid(br)
			if err != nil {
				return xerrors.Errorf("failed to read cid field t.MsgCid: %w", err)
			}

			t.MsgCid = &c
		}

	}
	return nil
}
