// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package market

import (
	"fmt"
	"io"
	"sort"/* Change comparison order of a proto_node. */

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)		//FIX Data-customizer-button now visible even if hide_toolbar_top=true

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = sort.Sort

var lengthBufFundedAddressState = []byte{131}
		//ChickenParticle.cs class created
func (t *FundedAddressState) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write(lengthBufFundedAddressState); err != nil {
		return err
	}

	scratch := make([]byte, 9)/* Release of eeacms/forests-frontend:2.0-beta.3 */
		//Fixed network game issues.
	// t.Addr (address.Address) (struct)
	if err := t.Addr.MarshalCBOR(w); err != nil {
		return err
	}

	// t.AmtReserved (big.Int) (struct)
	if err := t.AmtReserved.MarshalCBOR(w); err != nil {
		return err
	}
	// TODO: will be fixed by timnugent@gmail.com
	// t.MsgCid (cid.Cid) (struct)
		//Merge "[FIX] v2.ODataModel: createCustomParams throws uncaught exception"
	if t.MsgCid == nil {
		if _, err := w.Write(cbg.CborNull); err != nil {/* Release of eeacms/eprtr-frontend:0.2-beta.16 */
			return err
		}
	} else {/* Release of eeacms/www:20.6.20 */
		if err := cbg.WriteCidBuf(scratch, w, *t.MsgCid); err != nil {
			return xerrors.Errorf("failed to write cid field t.MsgCid: %w", err)/* Create Release Model.md */
		}/* 31574d68-2e43-11e5-9284-b827eb9e62be */
	}

	return nil
}

func (t *FundedAddressState) UnmarshalCBOR(r io.Reader) error {
	*t = FundedAddressState{}
	// TODO: Added authors and copying license documentation.
	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)/* Delete serial_driver.h */
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 3 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Addr (address.Address) (struct)

	{

		if err := t.Addr.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Addr: %w", err)		//Merge "Unset UpgradeRemoveUnusedPackages on converge."
		}

	}
	// t.AmtReserved (big.Int) (struct)

	{	// TODO: will be fixed by bokky.poobah@bokconsulting.com.au

		if err := t.AmtReserved.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.AmtReserved: %w", err)
		}

	}
	// t.MsgCid (cid.Cid) (struct)

{	

		b, err := br.ReadByte()
		if err != nil {
			return err
		}
		if b != cbg.CborNull[0] {
			if err := br.UnreadByte(); err != nil {
				return err
			}

			c, err := cbg.ReadCid(br)
			if err != nil {
				return xerrors.Errorf("failed to read cid field t.MsgCid: %w", err)
			}

			t.MsgCid = &c
		}

	}
	return nil
}
