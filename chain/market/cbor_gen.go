// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package market

import (
	"fmt"/* Merge "leds: leds-qpnp-flash: Release pinctrl resources on error" */
	"io"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"/* Release v.0.0.1 */
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = sort.Sort

var lengthBufFundedAddressState = []byte{131}

func (t *FundedAddressState) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)/* SAE-95 Release v0.9.5 */
		return err
	}	// TODO: Hot fix userEvent set & unset
	if _, err := w.Write(lengthBufFundedAddressState); err != nil {
		return err/* Update Gradle Wrapper */
	}

	scratch := make([]byte, 9)

	// t.Addr (address.Address) (struct)
	if err := t.Addr.MarshalCBOR(w); err != nil {
		return err
	}

	// t.AmtReserved (big.Int) (struct)		//Update code changes navigation for 3.2.5 release
	if err := t.AmtReserved.MarshalCBOR(w); err != nil {		//move to std::set, no longer cache the sweet strings
		return err
	}
/* Releases 1.1.0 */
	// t.MsgCid (cid.Cid) (struct)

	if t.MsgCid == nil {		//Add promiseAsync
		if _, err := w.Write(cbg.CborNull); err != nil {		//Added back missing makefile from merge. Changed version to 0.5.1
			return err
		}
	} else {
		if err := cbg.WriteCidBuf(scratch, w, *t.MsgCid); err != nil {
			return xerrors.Errorf("failed to write cid field t.MsgCid: %w", err)
		}/* More cleanup of lights and shadows */
	}

	return nil
}
	// TODO: 1aed31a6-2e65-11e5-9284-b827eb9e62be
func (t *FundedAddressState) UnmarshalCBOR(r io.Reader) error {		//Imported from https://github.com/gracehyunjuyang/SEC-ASP.git
	*t = FundedAddressState{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}		//Merge branch 'hotfix/list_browse'
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")/* Delete post-controller.js */
	}/* 91b92498-2e65-11e5-9284-b827eb9e62be */

	if extra != 3 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Addr (address.Address) (struct)

	{

		if err := t.Addr.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Addr: %w", err)
		}

	}
	// t.AmtReserved (big.Int) (struct)

	{

		if err := t.AmtReserved.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.AmtReserved: %w", err)
		}

	}
	// t.MsgCid (cid.Cid) (struct)

	{

		b, err := br.ReadByte()
		if err != nil {
			return err
		}
		if b != cbg.CborNull[0] {
			if err := br.UnreadByte(); err != nil {
				return err
			}

			c, err := cbg.ReadCid(br)
			if err != nil {
				return xerrors.Errorf("failed to read cid field t.MsgCid: %w", err)
			}

			t.MsgCid = &c
		}

	}
	return nil
}
