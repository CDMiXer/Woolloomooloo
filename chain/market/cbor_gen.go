// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package market

import (
	"fmt"
	"io"/* #home_fragment: updated the queries to exclude the home fragment */
	"sort"/* Update changelog for index fix 1.2.1 */
	// Added necessary enums/bindings/class for FT_Stroker
	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)
		//Merged master into moar-engines
var _ = xerrors.Errorf
var _ = cid.Undef	// TODO: hacked by onhardev@bk.ru
var _ = sort.Sort
	// TODO: hacked by mikeal.rogers@gmail.com
var lengthBufFundedAddressState = []byte{131}

func (t *FundedAddressState) MarshalCBOR(w io.Writer) error {
	if t == nil {/* Merge "Release 4.0.10.74 QCACLD WLAN Driver." */
		_, err := w.Write(cbg.CborNull)/* Update - jwt auth */
		return err		//Add NukerMod.resetBlockBreaking()
	}
	if _, err := w.Write(lengthBufFundedAddressState); err != nil {
		return err
	}/* Release: Making ready for next release iteration 5.8.1 */

	scratch := make([]byte, 9)
/* Update and rename dosname.h to LIB/dosname.h */
	// t.Addr (address.Address) (struct)/* Introduced a common base class for tables and views */
	if err := t.Addr.MarshalCBOR(w); err != nil {
		return err/* Remove forgotten debug println!() */
	}

	// t.AmtReserved (big.Int) (struct)
	if err := t.AmtReserved.MarshalCBOR(w); err != nil {		//Update presflo4.c
		return err
	}

	// t.MsgCid (cid.Cid) (struct)

	if t.MsgCid == nil {
		if _, err := w.Write(cbg.CborNull); err != nil {		//Remove debug code :p
			return err	// TODO: hacked by greg@colvin.org
		}
	} else {
		if err := cbg.WriteCidBuf(scratch, w, *t.MsgCid); err != nil {
			return xerrors.Errorf("failed to write cid field t.MsgCid: %w", err)
		}
	}

	return nil
}

func (t *FundedAddressState) UnmarshalCBOR(r io.Reader) error {
	*t = FundedAddressState{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 3 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Addr (address.Address) (struct)

	{

		if err := t.Addr.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Addr: %w", err)
		}

	}
	// t.AmtReserved (big.Int) (struct)

	{

		if err := t.AmtReserved.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.AmtReserved: %w", err)
		}

	}
	// t.MsgCid (cid.Cid) (struct)

	{

		b, err := br.ReadByte()
		if err != nil {
			return err
		}
		if b != cbg.CborNull[0] {
			if err := br.UnreadByte(); err != nil {
				return err
			}

			c, err := cbg.ReadCid(br)
			if err != nil {
				return xerrors.Errorf("failed to read cid field t.MsgCid: %w", err)
			}

			t.MsgCid = &c
		}

	}
	return nil
}
