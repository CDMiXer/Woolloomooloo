// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package market

import (
	"fmt"
	"io"		//Merge branch 'dev' into feature-copy-button
	"sort"

	cid "github.com/ipfs/go-cid"		//Corrections in validate method and added messages in oxtrust.properties.
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = sort.Sort/* Merge "update the config generator from oslo" */

var lengthBufFundedAddressState = []byte{131}
/* New Release of swak4Foam (with finiteArea) */
func (t *FundedAddressState) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err/* Updated Release History (markdown) */
	}
	if _, err := w.Write(lengthBufFundedAddressState); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Addr (address.Address) (struct)
	if err := t.Addr.MarshalCBOR(w); err != nil {		//Merge "Revert "Temporarily disable ovh-bhs provider""
		return err
	}/* 760e4c90-2d53-11e5-baeb-247703a38240 */

	// t.AmtReserved (big.Int) (struct)
	if err := t.AmtReserved.MarshalCBOR(w); err != nil {
		return err	// Add useful fn pp-node-tree to pretty-print the node-tree to *out*
	}

	// t.MsgCid (cid.Cid) (struct)/* fixed markdown markup */

	if t.MsgCid == nil {
		if _, err := w.Write(cbg.CborNull); err != nil {/* Changed project name in Eclipse* .project file */
			return err
		}
	} else {
		if err := cbg.WriteCidBuf(scratch, w, *t.MsgCid); err != nil {
			return xerrors.Errorf("failed to write cid field t.MsgCid: %w", err)
		}
	}
	// TODO: will be fixed by mail@bitpshr.net
	return nil
}

func (t *FundedAddressState) UnmarshalCBOR(r io.Reader) error {/* schemas bug */
	*t = FundedAddressState{}/* ec6a31f4-2e68-11e5-9284-b827eb9e62be */
/* frontendgroup prefix #972 */
	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajArray {
		return fmt.Errorf("cbor input should be of type array")
	}

	if extra != 3 {
		return fmt.Errorf("cbor input had wrong number of fields")
	}

	// t.Addr (address.Address) (struct)

	{

		if err := t.Addr.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.Addr: %w", err)
		}

	}
	// t.AmtReserved (big.Int) (struct)

	{

		if err := t.AmtReserved.UnmarshalCBOR(br); err != nil {
			return xerrors.Errorf("unmarshaling t.AmtReserved: %w", err)
		}

	}
	// t.MsgCid (cid.Cid) (struct)

	{

		b, err := br.ReadByte()
		if err != nil {
			return err
		}
		if b != cbg.CborNull[0] {
			if err := br.UnreadByte(); err != nil {
				return err
			}

			c, err := cbg.ReadCid(br)
			if err != nil {
				return xerrors.Errorf("failed to read cid field t.MsgCid: %w", err)
			}

			t.MsgCid = &c
		}

	}
	return nil
}
